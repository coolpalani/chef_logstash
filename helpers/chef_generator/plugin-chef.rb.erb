<%-

require 'nokogiri'

# Set variable to fase. Will be set to true if we have a path resource and require to create a directory
got_path_resource = false

def word_wrap(text, line_width = 70 )
  return text if line_width <= 0
  text.gsub(/\n/, ' ').gsub(/(.{1,#{ line_width }})(\s+|$)/, "\\1\n").strip
end

def wrap_and_prepend(text, line_width=70)
  holder=''
  text1 = word_wrap(text, line_width)
  text2 = text1.split("\n")
  text3 = text2.map{ |word| "#   #{ word }" }
  text3.each do |line|
    line = line.strip
    holder+=line+"\n"
  end
  return holder
end

doc = Nokogiri::HTML(description)
desc_text=doc.xpath("//text()").remove.to_s
desc = wrap_and_prepend(desc_text)

plugin_name = name
  documentation=""

  sorted_attributes.each do | name, config |
    next if config[:deprecated]
    if config[:validate].is_a?(Symbol)
      valinput='Value type is '+config[:validate].to_s
    elsif config[:validate].nil?
      puts "#{ name } is nil"
      valinput='Value type is String'
    elsif config[:validate].is_a?(Array)
      valinput='Value can be any of: '+config[:validate].map(&:inspect).join(", ")
    end
    if config.include?(:default)
      defvalue=config[:default].inspect
    else
      defvalue='None'
    end
    if config[:required]
      mandatory='required'
    else
      mandatory='optional'
    end

    desc=config[:description]
    doc = Nokogiri::HTML(desc)
    desc_text=doc.xpath("//text()").remove.to_s
    desc = wrap_and_prepend(desc_text)
    valname = name.to_s
    valinput = wrap_and_prepend(valinput)

    documentation+="# [*"+valname+"*]\n"
    documentation+=desc
    documentation+=valinput
    documentation+="#   Default value: "+defvalue+"\n"
    documentation+="#   This variable is "+mandatory+"\n"
    documentation+="#\n"
  end
-%>
require File.expand_path('../resource_logstash_config', __FILE__)

class Chef
  class Resource
    class Logstash
      class <%= section.capitalize %><%= name.capitalize %> < Chef::Resource::LogstashConfig

  <%-
  sorted_2 = sorted_attributes.sort_by { |a,b| b[:validate].class == Symbol ? b[:validate] : :other  }
  sorted_2.each do |name, config|
  next if config[:deprecated]
  if config[:validate].is_a?(Array)
    annotation = "#{ config[:validate].inspect }"
  else
    annotation = "#{ config[:validate] }"
  end
  next if name.is_a?(Regexp)
if annotation == 'string' or annotation == 'password' or annotation == 'path' %>
        def <%=name%>(arg=nil)
          set_or_return(:<%=name%>, arg, :kind_of => [String])
        end
<% elsif  annotation == 'array' %>
        def <%=name%>(arg=nil)
          set_or_return(:<%=name%>, arg, :kind_of => [Array])
        end
<% elsif annotation == 'number' or annotation == 'integer' %>
        def <%=name%>(arg=nil)
          set_or_return(:<%=name%>, arg, :kind_of => [Fixnum])
        end
<% elsif annotation == 'hash' %>
        def <%=name%>(arg=nil)
          set_or_return(:<%=name%>, arg, :kind_of => [Hash])
        end
<% elsif annotation == 'boolean' or annotation == 'bool' %>
        def <%=name%>(arg=nil)
          set_or_return(:<%=name%>, arg, :kind_of => [TrueClass, FalseClass])
        end
<% else
  annotation = annotation.to_s.gsub(/\"/,'')
  annotation = annotation.to_s.gsub(',', '')
  annotation = annotation.gsub('[','')
  annotation = annotation.gsub(']','')
%>
        def <%=name%>(arg=nil)
          set_or_return(:<%=name%>, arg, :kind_of => [String], :equal_to => %w(<%=annotation%>) )
        end
<% end
end %>
      end
    end
  end
end
